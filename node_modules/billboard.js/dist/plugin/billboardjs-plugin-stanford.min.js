/*!
 * Copyright (c) 2017 ~ present NAVER Corp.
 * billboard.js project is licensed under the MIT license
 * 
 * billboard.js, JavaScript chart library
 * https://naver.github.io/billboard.js/
 * 
 * @version 1.12.11
 * @requires billboard.js
 * @summary billboard.js plugin
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("d3-selection"),require("d3-interpolate"),require("d3-color"),require("d3-scale"),require("d3-brush"),require("d3-axis"),require("d3-format")):"function"==typeof define&&define.amd?define("stanford",["d3-selection","d3-interpolate","d3-color","d3-scale","d3-brush","d3-axis","d3-format"],e):"object"==typeof exports?exports.stanford=e(require("d3-selection"),require("d3-interpolate"),require("d3-color"),require("d3-scale"),require("d3-brush"),require("d3-axis"),require("d3-format")):(t.bb=t.bb||{},t.bb.plugin=t.bb.plugin||{},t.bb.plugin.stanford=e(t.d3,t.d3,t.d3,t.d3,t.d3,t.d3,t.d3))}(this,(function(t,e,n,r,o,i,a){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=20)}([,function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(2);function o(t,e){if(t){if("string"==typeof t)return Object(r.a)(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Object(r.a)(t,e):void 0}}},function(t,e,n){"use strict";function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}n.d(e,"a",(function(){return o}))},function(t,e,n){"use strict";function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(7),o=n(5);function i(t,e){return!e||"object"!==Object(r.a)(e)&&"function"!=typeof e?Object(o.a)(t):e}},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";function r(t){return(r=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}n.d(e,"a",(function(){return r}))},function(e,n){e.exports=t},function(t,e,n){"use strict";n.d(e,"a",(function(){return a}));var r=n(3),o=n(4),i=n(9),a=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(r.a)(this,t),this.options=e}return Object(o.a)(t,[{key:"$beforeInit",value:function(){}},{key:"$init",value:function(){}},{key:"$afterInit",value:function(){}},{key:"$redraw",value:function(){}},{key:"$willDestroy",value:function(){var t=this;Object.keys(this).forEach((function(e){t[e]=null,delete t[e]}))}}]),t}();Object(i.a)(a,"version","1.12.11")},function(t,n){t.exports=e},function(t,e){t.exports=n},function(t,e){t.exports=r},function(t,e){t.exports=o},function(t,e){t.exports=i},function(t,e){t.exports=a},,,function(t,e,n){"use strict";n.r(e),n.d(e,"default",(function(){return Y}));var r=n(2);var o=n(1);function i(t){return function(t){if(Array.isArray(t))return Object(r.a)(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||Object(o.a)(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var a,c=n(3),u=n(4),s=n(5),l=n(23),f=n(6),d=n(8),p=n(12),h=n(13),y=n(14),b="bb-tooltip",v="bb-tooltip-name",g=n(7),m=(n(10),n(15),(a=function(t){return void 0!==t&&t})(self)||a(window)||a(global)||a(globalThis)||Function("return this")()),x=m&&m.document,j=function(t){return"function"==typeof t},O=function(t){return"string"==typeof t},S=function(t){return"number"==typeof t},w=function(t){return"object"===Object(g.a)(t)},_=function(t){return void 0===t||null===t||O(t)&&0===t.length||w(t)&&!(t instanceof Date)&&0===Object.keys(t).length||S(t)&&isNaN(t)},k=function(t){return t&&t.constructor===Array},$=function(t){return t&&!t.nodeType&&w(t)&&!k(t)},E=function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];if(!n.length||1===n.length&&!n[0])return t;var o=n.shift();return $(t)&&$(o)&&Object.keys(o).forEach((function(e){var n=o[e];$(n)?(!t[e]&&(t[e]={}),t[e]=E(t[e],n)):t[e]=k(n)?n.concat():n})),E.apply(void 0,[t].concat(n))})),C=(function(){try{new MouseEvent("t")}catch(t){return function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{bubbles:!1,cancelable:!1,screenX:0,screenY:0,clientX:0,clientY:0},r=x.createEvent("MouseEvent");r.initMouseEvent(e,n.bubbles,n.cancelable,m,0,n.screenX,n.screenY,n.clientX,n.clientY,!1,!1,!1,!1,0,null),t.dispatchEvent(r)}}}(),n(11)),M=function t(){return Object(c.a)(this,t),{colors:void 0,epochs:[],lines:[],scale_min:void 0,scale_max:void 0,scale_width:20,scale_format:void 0,padding_top:0,padding_right:0,padding_bottom:0,padding_left:0,regions:[]}},P="bb-colorscale",q="bb-stanford-elements",A="bb-stanford-line",R="bb-stanford-lines",D="bb-stanford-region",T="bb-stanford-regions";function F(t,e){return t.epochs<e.epochs?-1:t.epochs>e.epochs?1:0}function I(t){for(var e,n=function(t){for(var e,n,r=0,o=0,i=t.length,a=i-1;o<i;a=o,o++)e=t[o],n=t[a],r+=e.x*n.y,r-=e.y*n.x;return r/=2}(t),r=0,o=0,i=0,a=t.length,c=a-1;i<a;c=i,i++){var u=t[i],s=t[c];e=u.x*s.y-s.x*u.y,r+=(u.x+s.x)*e,o+=(u.y+s.y)*e}return{x:r/(e=6*n),y:o/e}}var N=function(){function t(e){Object(c.a)(this,t),this.owner=e;var n=e.$$.main.select(".bb-chart").append("g").attr("class",q);n.append("g").attr("class",R),n.append("g").attr("class",T)}return Object(u.a)(t,[{key:"updateStanfordLines",value:function(t){var e=this.owner.$$,n=e.main,r=e.config.axis_rotated,o=this.xvCustom.bind(e),i=this.yvCustom.bind(e),a=n.select(".".concat(R)).style("shape-rendering","geometricprecision").selectAll(".".concat(A)).data(this.owner.config.lines);a.exit().transition().duration(t).style("opacity","0").remove();var c=a.enter().append("g");c.append("line").style("opacity","0"),c.merge(a).attr("class",(function(t){return A+(t.class?" ".concat(t.class):"")})).select("line").transition().duration(t).attr("x1",(function(t){return r?i(t,"y1"):o(t,"x1")})).attr("x2",(function(t){return r?i(t,"y2"):o(t,"x2")})).attr("y1",(function(t){return r?o(t,"x1"):i(t,"y1")})).attr("y2",(function(t){return r?o(t,"x2"):i(t,"y2")})).transition().style("opacity","1")}},{key:"updateStanfordRegions",value:function(t){var e=this.owner.$$,n=e.main,r=e.config.axis_rotated,o=this.xvCustom.bind(e),i=this.yvCustom.bind(e),a=this.owner.countEpochsInRegion.bind(e),c=n.select(".".concat(T)).selectAll(".".concat(D)).data(this.owner.config.regions);c.exit().transition().duration(t).style("opacity","0").remove();var u=c.enter().append("g");u.append("polygon").style("opacity","0"),u.append("text").attr("transform",r?"rotate(-90)":"").style("opacity","0"),(c=u.merge(c)).attr("class",(function(t){return D+(t.class?" ".concat(t.class):"")})).select("polygon").transition().duration(t).attr("points",(function(t){return t.points.map((function(t){return[r?i(t,"y"):o(t,"x"),r?o(t,"x"):i(t,"y")].join(",")})).join(" ")})).transition().style("opacity",(function(t){return(t.opacity?t.opacity:.2)+""})),c.select("text").transition().duration(t).attr("x",(function(t){return r?i(I(t.points),"y"):o(I(t.points),"x")})).attr("y",(function(t){return r?o(I(t.points),"x"):i(I(t.points),"y")})).text((function(t){if(t.text){var e=a(t.points),n=e.value,r=e.percentage;return t.text(n,r)}return""})).attr("text-anchor","middle").attr("dominant-baseline","middle").transition().style("opacity","1")}},{key:"updateStanfordElements",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.updateStanfordLines(t),this.updateStanfordRegions(t)}},{key:"xvCustom",value:function(t,e){var n=this,r=e?t[e]:n.getBaseValue(t);return n.isTimeSeries()?r=n.parseDate(r):n.isCategorized()&&O(r)&&(r=n.config.axis_x_categories.indexOf(t.value)),Math.ceil(n.x(r))}},{key:"yvCustom",value:function(t,e){var n=t.axis&&"y2"===t.axis?this.y2:this.y,r=e?t[e]:this.getBaseValue(t);return Math.ceil(n(r))}}]),t}(),L=n(16),B=n(17),V=function(){function t(e){Object(c.a)(this,t),this.owner=e}return Object(u.a)(t,[{key:"drawColorScale",value:function(){var t=this.owner.$$,e=this.owner.config,n=t.data.targets[0],r=t.height-e.padding_bottom-e.padding_top,o=e.scale_width,i=function(t,e){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=[],o=0|Math.max(0,Math.ceil((e-t)/n)),i=t;i<o;i++)r.push(t+i*n);return r}(e.padding_bottom,r,5),a=Object(y.scaleSequential)(n.colors).domain([i[i.length-1],i[0]]);this.colorScale&&this.colorScale.remove(),this.colorScale=t.svg.append("g").attr("width",50).attr("height",r).attr("class",P),this.colorScale.append("g").attr("transform","translate(0, ".concat(e.padding_top,")")).selectAll("bars").data(i).enter().append("rect").attr("y",(function(t,e){return 5*e})).attr("x",0).attr("width",o).attr("height",5).attr("fill",(function(t){return a(t)}));var c=Object(y.scaleLog)().domain([n.minEpochs,n.maxEpochs]).range([i[0]+e.padding_top+i[i.length-1]+5-1,i[0]+e.padding_top]),u=Object(L.axisRight)(c),s=e.scale_format;"pow10"===s?u.tickValues([1,10,100,1e3,1e4,1e5,1e6,1e7]):j(s)?u.tickFormat(s):u.tickFormat(Object(B.format)("d"));var l=this.colorScale.append("g").attr("class","legend axis").attr("transform","translate(".concat(o,",0)")).call(u);"pow10"===s&&l.selectAll(".tick text").text(null).filter((function(t){return t/Math.pow(10,Math.ceil(Math.log(t)/Math.LN10-1e-12))==1})).text(10).append("tspan").attr("dy","-.7em").text((function(t){return Math.round(Math.log(t)/Math.LN10)})),this.colorScale.attr("transform","translate(".concat(t.currentWidth-this.xForColorScale(),", 0)"))}},{key:"xForColorScale",value:function(){return this.owner.config.padding_right+this.colorScale.node().getBBox().width}},{key:"getColorScalePadding",value:function(){return this.xForColorScale()+this.owner.config.padding_left+20}}]),t}();function X(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Object(d.a)(t);if(e){var o=Object(d.a)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Object(f.a)(this,n)}}var Y=function(t){function e(t){var r;return Object(c.a)(this,e),(r=n.call(this,t)).config=new M,Object(f.a)(r,Object(s.a)(r))}Object(l.a)(e,t);var n=X(e);return Object(u.a)(e,[{key:"$beforeInit",value:function(){var t=this,e=this.$$;e.config.data_xSort=!1,e.isMultipleX=function(){return!0},e.showGridFocus=function(){},e.labelishData=function(t){return t.values},e.opacityForCircle=function(){return 1};var n=e.getCurrentPaddingRight.bind(e);e.getCurrentPaddingRight=function(){return n()+(t.colorScale?t.colorScale.getColorScalePadding():0)}}},{key:"$init",value:function(){var t=this.$$;t.loadConfig.bind(this)(this.options),t.color=this.getStanfordPointColor.bind(t),this.colorScale=new V(this),this.elements=new N(this),this.convertData(),this.initStanfordData(),this.setStanfordTooltip(),this.colorScale.drawColorScale(),this.$redraw()}},{key:"$redraw",value:function(t){this.colorScale&&this.colorScale.drawColorScale(),this.elements&&this.elements.updateStanfordElements(t)}},{key:"getOptions",value:function(){return new M}},{key:"convertData",value:function(){var t=this.$$.data.targets,e=this.options.epochs;t.forEach((function(t){t.values.forEach((function(t,n){t.epochs=e[n]})),t.minEpochs=void 0,t.maxEpochs=void 0,t.colors=void 0,t.colorscale=void 0}))}},{key:"xvCustom",value:function(t,e){var n=this,r=e?t[e]:n.getBaseValue(t);return n.isTimeSeries()?r=n.parseDate(r):n.isCategorized()&&O(r)&&(r=n.config.axis_x_categories.indexOf(t.value)),Math.ceil(n.x(r))}},{key:"yvCustom",value:function(t,e){var n=t.axis&&"y2"===t.axis?this.y2:this.y,r=e?t[e]:this.getBaseValue(t);return Math.ceil(n(r))}},{key:"initStanfordData",value:function(){var t=this.config,e=this.$$.data.targets[0];e.values.sort(F);var n=e.values.map((function(t){return t.epochs}));e.minEpochs=isNaN(t.scale_min)?Math.min.apply(Math,i(n)):t.scale_min,e.maxEpochs=isNaN(t.scale_max)?Math.max.apply(Math,i(n)):t.scale_max,e.colors=j(t.colors)?t.colors:Object(p.interpolateHslLong)(Object(h.hsl)(250,1,.5),Object(h.hsl)(0,1,.5)),e.colorscale=Object(y.scaleSequentialLog)(e.colors).domain([e.minEpochs,e.maxEpochs])}},{key:"getStanfordPointColor",value:function(t){return this.data.targets[0].colorscale(t.epochs)}},{key:"setStanfordTooltip",value:function(){var t=this.$$.config;_(t.tooltip_contents)&&(t.tooltip_contents=function(t,e,n,r){var o=this,i='<table class="'.concat(b,'"><tbody>');return t.forEach((function(t){i+="<tr>\n\t\t\t\t\t\t\t<th>".concat(e(o.config.data_x),'</th>\n\t\t\t\t\t\t\t<th class="value">').concat(n(t.x),"</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>").concat(e(t.id),'</th>\n\t\t\t\t\t\t\t<th class="value">').concat(n(t.value),'</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr class="').concat(v,"-").concat(t.id,'">\n\t\t\t\t\t\t\t<td class="name"><span style="background-color:').concat(r(t),'"></span>').concat(e("Epochs"),'</td>\n\t\t\t\t\t\t\t<td class="value">').concat(n(t.epochs),"</td>\n\t\t\t\t\t\t</tr>")})),"".concat(i,"</tbody></table>")})}},{key:"countEpochsInRegion",value:function(t){var e=this.data.targets[0],n=e.values.reduce((function(t,e){return t+ +e.epochs}),0),r=e.values.reduce((function(e,n){return function(t,e){for(var n=t.x,r=t.value,o=!1,i=0,a=e.length-1;i<e.length;a=i++){var c=e[i].x,u=e[i].y,s=e[a].x,l=e[a].y;u>r!=l>r&&n<(s-c)*(r-u)/(l-u)+c&&(o=!o)}return o}(n,t)?e+ +n.epochs:e}),0);return{value:r,percentage:0===r?0:+(r/n*100).toFixed(1)}}}]),e}(C.a)},,,function(t,e,n){"use strict";function r(t,e){return(r=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&r(t,e)}n.d(e,"a",(function(){return o}))}]).default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,